[
  {
    "title": "기본 용어 정리",
    "content": "변수(Variable): 데이터를 저장하는 공간, var, let, const 키워드 사용\n\n 데이터 타입(Data type): \n원시 타입: string, number, boolean, null, undefined, symbol\n 참조 타입: 객체, 배열, 함수\n\n 함수(Function): 특정 작업을 수행하는 코드 블록, 재사용 가능, 매개변수를 받아 결과 반환\n\n 객체(Object): 속성(property)과 값(value)의 집합 키 & 값 쌍으로 저장\n\n 배열(Array): 여러 값을 하나의 변수에 저장할 수 있는 자료구조, 인덱스를 통해 접근\n\n 매개변수(Parameter): 입력값을 받을 수 있도록 함수 선언부에 적는 변수\n\n 클래스(Class): 객체를 정의하기 위한 설계도\n\n 인스턴스(Instance): 클래스를 기반으로 생성된 객체"
  },
  {
    "title": "var, let, const 차이",
    "content": "var 옛날 코드에서만 사용\n let: 변수 값이 변할 수 있음\n const: 한 번 정하면 값이 변하지 않음"
  },
  {
    "title": "동기와 비동기란",
    "content": "동기: 코드가 순차적으로 실행 -> 실행이 끝날 때까지 다음 코드 대기\n\n 비동기: 특정 작업이 끝날 때까지 기다리지 않고 다른 작업을 수행 -> 실행이 완료되면 나중에 결과를 받아 처리"
  },
  {
    "title": "비동기 처리란",
    "content": "시간이 오래 걸리는 작업을 기다리지 않고 다른 작업을 계속 실행할 수 있게 하여, 앱의 응답성과 효율을 높여준다\n Callback : 가장 단순한 비동기 처리, 비동기 작업이 중첩되면 콜백 지옥에 빠질 수 있음\n Promise: 여러 비동기 작업을 연속적으로 처리 가능 -> callback의 단점 보완 & catch로 에러를 한 곳에서 처리 가능\n Async/Await : promise를 기반으로 더 직관적이며 동기처럼 작성 가능, try/catch를 사용하여 에러 처리"
  },
  {
    "title": "undefined, null, undeclared의 차이",
    "content": "undefined: 변수는 선언되었지만 값이 할당되지 않은 상태\n null: 값이 없음을 의미\n undeclared: 선언되지 않은 변수에 접근했을 때 발생하는 에러"
  },
  {
    "title": "this 바인딩이란",
    "content": "this 키워드가 참조하는 객체, 주로 함수 내부에서 사용되며 어떤 컨텍스트에서 호출되느냐에 따라 값이 달라짐\n 특정한 객체나 컨텍스트에 this를 연결시키는 작업을 의미\n\n 기본 바인딩 : 브라우저 환경일 경우 window, node.js 환경일 경우 global\n 함수: 기본적으로 전역 객체, strict mode일 경우 undefined\n 메서드: 메서드를 호출한 객체\n 화살표 함수: 외부 스코프의 this를 상속받음 -> 정적으로 바인딩\n\n 그외 call, apply, bind를 통해 명시적으로 지정 가능"
  },
  {
    "title": "closure란",
    "content": "함수가 생성될 때 외부 스코프를 기억하고 그 스코프에 접근할 수 있는 기능, 즉 함수가 외부 함수의 변수에 접근할 수 있는 구조\n 정보 은닉과 상태 유지에 용이\n 메모리에 변수를 참조 상태로 유지하기 때문에 과도하게 사용할 경우 메모리 누수 발생 가능 -> 사용 후 참조 제거"
  },
  {
    "title": "hoisting이란",
    "content": "자바스크립트에서 변수와 함수 선언이 코드 실행 전에 메모리에 할당되는 현상\n 코드의 최상단으로 끌어올려지는 것처럼 동작\n 이유: 코드를 실행하기 전 실행 컨텍스트를 생성하면서 변수와 함수 선언을 먼저 처리하기 때문"
  },
  {
    "title": "Typescript를 사용하는 이유",
    "content": "명시적 타입 선언과 interface, type 선언을 통해 정적 타입 검사를 제공하여 코드의 안전성과 가독성을 높임\n Javascript는 동적 타입 언어이므로 런타임에서만 오류 확인 가능 -> Typescript는 컴파일 단계에서 타입 오류를 미리 감지\n 또한 타입이 명확하게 지정되면 코드의 의도가 분명해지고 유지보수가 쉬워짐"
  },
  {
    "title": "Optional Chaining (?.)과 Nullish Coalescing (??)",
    "content": "Optional Chaining (?.): 객체의 중첩된 속성이나 메서드 호출에 안전하게 접근하기 위한 연산자\n앞의 값이 null 또는 undefined면 오류 없이 undefined를 반환\n\n Nullish Coalescing (??): 왼쪽 값이 null 또는 undefined일 때만 오른쪽 값을 반환하는 연산자"
  },
  {
    "title": "모듈 시스템이란",
    "content": "코드를 분리하고 재사용하기 위한 구조 -> 코드의 재사용성 증가, 유지보수와 테스트 용이, 전역 네임스페이스 오염 방지, 협업 시 역할 분담 유리\n\n 대표적인 모듈\n ES Modules(ESM): import, export 키워드 사용, 정적 구조, 비동기적 로딩 지원, 트리 쉐이킹 가능"
  },
  {
    "title": "트리 쉐이킹이란",
    "content": "나무를 흔들어서 쓸모없는 잎(코드)을 털어낸다\n ESM 방식에서 사용되지 않은 코드를 번들링 과정에서 제거하는 최적화 기법\n 정적 분석을 통해 코드에서 사용되지 않는 export를 탐지\n -> 최종 번들 크기 감소, 로드 속도 향상, 성능 최적화"
  }
]
